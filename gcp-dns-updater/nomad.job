job "gcp-dns-updater" {
  datacenters = ["dc1"] # Assuming a default datacenter, adjust if needed
  type        = "service"

  periodic {
    # Run every 15 minutes
    cron = "*/15 * * * *"
    prohibit_overlap = true # Prevent jobs from running concurrently if one takes longer than 15 mins
  }

  group "updater" {
    count = 1

    restart {
      attempts = 2
      interval = "1m"
      delay = "15s"
      mode = "delay" # delay between attempts
    }

    # Volume mounting is no longer needed as we use env var for the key

    task "update-dns" {
      driver = "docker"

      config {
        image = "python:3.11-slim"
        # Volume mounting removed, key provided via env var
      }

      # Define environment variables needed by the script
      # These should ideally be configured securely (e.g., Nomad vars, Vault)
      env {
        GCP_PROJECT_ID             = "your-gcp-project-id" # Replace with actual Project ID or Nomad variable reference
        GCP_DNS_ZONE_NAME          = "demonsafe-com"       # Replace with actual Zone Name or Nomad variable reference
        GCP_DNS_RECORD_NAME        = "*.demonsafe.com"     # Replace with actual Record Name or Nomad variable reference
        # Base64 encoded service account key
        GCP_SERVICE_ACCOUNT_KEY_B64 = "REPLACE_WITH_BASE64_ENCODED_SERVICE_ACCOUNT_KEY_JSON"
      }

      # Template to copy script and requirements, install deps, and run
      template {
        data = <<EOH
#!/bin/sh
set -e
apk add --no-cache python3 py3-pip # Ensure python and pip are available in the slim image if needed

echo "Creating application directory..."
mkdir -p /app
cd /app

echo "Copying application files..."
cp /local/update_dns.py /app/update_dns.py
cp /local/requirements.txt /app/requirements.txt

echo "Installing dependencies..."
pip install --no-cache-dir -r /app/requirements.txt

echo "Running DNS update script..."
python3 /app/update_dns.py
EOH

        destination   = "/local/entrypoint.sh"
        change_mode   = "signal"
        change_signal = "SIGINT"
        perms         = "744"
      }

      # Artifacts to download script and requirements into the allocation directory
      # These paths assume the job is run relative to the repo root where the gcp-dns-updater dir exists.
      # Adjust source paths if running from a different directory structure.
      artifact {
        source = "file://./gcp-dns-updater/update_dns.py" # Path relative to job submission context
        destination = "/local/"
      }
      artifact {
        source = "file://./gcp-dns-updater/requirements.txt" # Path relative to job submission context
        destination = "/local/"
      }

      # Command to execute the script generated by the template
      command = "/local/entrypoint.sh"

      resources {
        cpu    = 100 # MHz
        memory = 128  # MB increased slightly for pip install
      }
    }
  }
}
