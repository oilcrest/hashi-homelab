job "plex" {
  region = var.region
  datacenters = ["dc1"]
  type        = "service"

  meta {
      job_file = "nomad_jobs/media-stack/plex/nomad.job"
version = "3"  // Incremented version number
  }

  group "downloaders" {
    count = 1 
    network {
      port "http" {
        host_network = "lan"
        static = "32400"
      }
    }

    // Use a CSI volume specifically optimized for databases
    volume "plex-db" {
      type      = "csi"
      read_only = false
      source    = "plex-database"
      access_mode = "single-node-writer"
      attachment_mode = "file-system"
    }

    task "plex" {
      driver = "docker"
      config {
        image = "plexinc/pms-docker:1.42.1.10060-4e8b05daf"
        network_mode = "host"
        privileged = "true"
        force_pull = "true"
        volumes = [
          "/tmp:/transcode",
          "${var.media_dir}:/data",
          "${var.shared_dir}plex_new:/config",
          "local/optimize-db.sh:/etc/cont-init.d/30-optimize-db",
        ]
        // No custom command - let the container start normally
      }

      volume_mount {
        volume      = "plex-db"
        destination = "/opt/plex-db"
        read_only   = false
      }

      // Setup script that runs as part of the container init system
      template {
        data = <<EOH
#!/usr/bin/with-contenv bash
set -euo pipefail

echo "Setting up Plex database optimizations..."

# Create necessary directory structure
mkdir -p /opt/plex-db
DB_DIR="/config/Library/Application Support/Plex Media Server/Plug-in Support/Databases"
mkdir -p "$DB_DIR"

# Check if we need to move existing databases
if [ -z "$(ls -A /opt/plex-db 2>/dev/null || true)" ]; then
  echo "Database volume is empty, copying existing databases if any..."
  if [ -d "$DB_DIR" ] && [ -n "$(ls -A "$DB_DIR" 2>/dev/null || true)" ]; then
    cp -a "$DB_DIR"/* /opt/plex-db/
    echo "Copied existing databases to persistent volume"
  fi
fi

# Set up link to optimized database storage (only if not already linked)
if [ ! -L "$DB_DIR" ] || [ "$(readlink "$DB_DIR")" != "/opt/plex-db" ]; then
  echo "Setting up database symlink..."
  rm -rf "$DB_DIR"
  ln -sf /opt/plex-db "$DB_DIR"
fi

# Install SQLite3 if needed
if ! command -v sqlite3 &>/dev/null; then
  echo "Installing SQLite3..."
  apt-get update && apt-get install -y sqlite3
fi

# Set environment variables for SQLite
export SQLITE_TMPDIR=/tmp/plex_sqlite
mkdir -p "$SQLITE_TMPDIR"

# Apply optimizations to all databases
echo "Applying SQLite optimizations to databases..."
find /opt/plex-db -name "*.db" -type f 2>/dev/null | while read -r db; do
  echo "Optimizing $db"
  sqlite3 "$db" <<EOF
PRAGMA journal_mode = WAL;
PRAGMA synchronous = NORMAL;
PRAGMA temp_store = MEMORY;
PRAGMA mmap_size = 268435456;
PRAGMA cache_size = -8000;
PRAGMA busy_timeout = 5000;
ANALYZE;
EOF
done

echo "Database optimizations complete"
EOH
        destination = "local/optimize-db.sh"
        perms = "755"
      }

      env {
        PLEX_CLAIM = ""  // Add your claim token if needed
        ADVERTISE_IP = "http://192.168.50.5:32400/"  // Replace with your server IP
        PLEX_UID = "1000"
        PLEX_GID = "1000"
        CHANGE_CONFIG_DIR_OWNERSHIP = "false"
        // Skip first run setup if config exists
      }

      service {
        port = "http"
        name = "plex"
        tags = [
          "traefik.enable=true"
        ]
        check {
          type     = "tcp"
          interval = "10s"
          timeout  = "2s"
        }
      }

      resources {
        cpu    = 4000
        memory = 3072
      }
    }
  }
}

variable "region" {}
variable "tld" {}
variable "shared_dir" {}
variable "media_dir" {}
