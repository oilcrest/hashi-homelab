---
- name: network mounts
  hosts: 
    - lan-client-server
    - lan-client
    - cheese
  become: true
  remote_user: root
  tasks:
    - name: Ensure directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - /home/shared
        - /home/media/TV
        - /home/media/Music
        - /home/media/Movies
        - /home/media/Books

    - name: makesure multipath.conf exists
      copy:
        content: ""
        dest: /etc/multipath.conf
        force: no
        backup: yes
      ignore_errors: yes

    - name: Manage /etc/multipath.conf
      blockinfile:
        path: /etc/multipath.conf
        block: |
          defaults {
              user_friendly_names yes
              find_multipaths yes
          }

    - name: Install Apt packages
      apt:
        name:
          - nfs-common
          - avahi-daemon
          - docker.io
          - open-iscsi
          - lsscsi
          - sg3-utils
          - multipath-tools
          - scsitools

    - name: Ensure specific /etc/fstab entries
      lineinfile:
        path: /etc/fstab
        line: "{{ item }}"
        insertafter: EOF
      with_items:
        - "192.168.50.208:/mnt/pool0/share              /home/shared         nfs4    _netdev,auto  0  1"
        - "192.168.50.208:/mnt/pool1/media/TV           /home/media/TV       nfs4    _netdev,auto  0  1"
        - "192.168.50.208:/mnt/pool0/media/music        /home/media/Music    nfs4    _netdev,auto  0  1"
        - "192.168.50.208:/mnt/pool1/media/Movies       /home/media/Movies   nfs4    _netdev,auto  0  1"
        - "192.168.50.208:/mnt/pool0/media/audiobooks   /home/media/Books    nfs4    _netdev,auto  0  1"
      notify: Mount Filesystems

    - name: Enable services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      with_items:
        - open-iscsi
        - multipath-tools

  handlers:
    - name: Mount Filesystems
      command: mount -a

- name: Update configuration, execute command, and install packages
  hosts: 
    - lan-client-server
    - lan-client
    - wan-clients
    - cheese
  remote_user: root
  #roles:
  #  - role: artis3n.tailscale
  #    vars:
  #      # Example pulling the API key from the env vars on the host running Ansible
  #      tailscale_authkey: "{{ lookup('env', 'NOMAD_VAR_tailscale_auth') }}"
  #      tailscale_args: "{% if 'wan-clients' in group_names %}--accept-routes=true{% else %}--accept-routes=false{% endif %}"
  tasks:
    - name: Ensure directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - /var/lib/nomad
        - /var/lib/consul
        - /etc/nomad.d
        - /etc/consul.d

    - name: Manage systemd service file nomad
      copy:
        src: configs/nomad.service
        dest: /lib/systemd/system/nomad.service
      notify: Reload systemd

    - name: Manage systemd service file consul
      copy:
        src: configs/consul.service
        dest: /lib/systemd/system/consul.service
      notify: Reload systemd

    - name: manage nomad config
      template:
        src: configs/nomad.hcl.j2
        dest: /etc/nomad.d/nomad.hcl
      notify: Restart Service

    - name: manage consul config
      template:
        src: configs/consul.hcl.j2
        dest: /etc/consul.d/server.hcl

    - name: Add HashiCorp APT repository key
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        state: present
        validate_certs: no
        keyring: /usr/share/keyrings/hashicorp-archive-keyring.gpg

    - name: Configure HashiCorp APT repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"

    - name: Install Apt packages
      apt:
        name:
          - nomad=1.10.4-1
          - consul=1.19.1-1
        dpkg_options: 'force-confdef,force-confold'
        update_cache: true
        state: latest
        allow_downgrade: true

    - name: Modify sysctl entry for net.ipv4.ip_nonlocal_bind
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
      with_items:
        - { name: "net.ipv4.ip_nonlocal_bind", value: "1" }
        - { name: "net.ipv4.conf.all.forwarding", value: "1" }
      notify: Apply Sysctl Changes

    - name: Enable services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      with_items:
        - nomad
        - consul
        - tailscaled

  handlers:
    - name: Restart Service
      service:
        name: nomad
        state: restarted

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Mount Filesystems
      command: mount -a

    - name: Apply Sysctl Changes
      command: sysctl -p /etc/sysctl.conf

- name: Install and configure Tailscale 
  hosts:
    - all
  become: yes
  remote_user: root
  gather_facts: yes

  vars:
    # Read authkey from environment variable; default to 'MISSING' if not set
    tailscale_auth_key: "{{ lookup('env', 'NOMAD_VAR_tailscale_auth') | default('MISSING') }}"
    # Optionally customize your Tailscale hostname
    tailscale_hostname: "{{ inventory_hostname }}"

  tasks:
    - name: Download Tailscale GPG key via curl
      shell: >
        curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/noble.noarmor.gpg
        | tee /usr/share/keyrings/tailscale-archive-keyring.gpg
        >/dev/null
      changed_when: true

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Configure Tailscale apt repository
      copy:
        dest: /etc/apt/sources.list.d/tailscale.list
        content: |
          deb [signed-by=/usr/share/keyrings/tailscale-archive-keyring.gpg arch=amd64] https://pkgs.tailscale.com/stable/ubuntu/ noble main

    - name: Update apt cache (after adding Tailscale repo)
      apt:
        update_cache: yes

    - name: Install Tailscale
      apt:
        name: tailscale
        state: present

    - name: Enable and start tailscaled service
      service:
        name: tailscaled
        state: started
        enabled: yes

    - name: Bring Tailscale interface up using authkey
      # "command" used because there's no official Ansible module for "tailscale up".
      # This is not strictly idempotent; see notes below for advanced usage.
      command: >
        tailscale up
        --authkey={{ tailscale_auth_key }}
        --hostname={{ tailscale_hostname }}
        --reset
      register: tailscale_up
      changed_when: "'Success' in tailscale_up.stdout or 'Success' in tailscale_up.stderr or tailscale_up.rc == 0"

    - name: Show tailscale status
      command: tailscale status
      register: tailscale_status
      changed_when: false

    - debug:
        var: tailscale_status.stdout

- name: Install Zsh and Oh My Zsh with Agnoster theme
  hosts: all
  become: yes
  remote_user: root
  gather_facts: yes

  vars:
    my_zsh_user: "root"  # Change this to the desired user

  tasks:
    - name: Install zsh
      apt:
        name: zsh
        state: present
        update_cache: yes

    - name: Ensure home directory path is known
      user:
        name: "{{ my_zsh_user }}"
      register: user_info  # This captures the user details, including home directory.

    - name: Check if Oh My Zsh is already installed
      stat:
        path: "/root/.oh-my-zsh"
      register: oh_my_zsh_stat

    - name: Check if zshrc exists
      stat:
        path: "/root/.zshrc"
      register: zshrc_stat

    - name: Clone Oh My Zsh
      git:
        repo: "https://github.com/ohmyzsh/ohmyzsh.git"
        dest: "/root/.oh-my-zsh"
      become_user: "{{ my_zsh_user }}"
      when: not oh_my_zsh_stat.stat.exists

    - name: Copy the default .zshrc template if not present
      copy:
        src: "/root/.oh-my-zsh/templates/zshrc.zsh-template"
        dest: "/root/.zshrc"
        remote_src: yes
      become_user: "{{ my_zsh_user }}"
      when: not zshrc_stat.stat.exists

    - name: Set Oh My Zsh theme to agnoster
      # Uses a regex replace to ensure 'ZSH_THEME="agnoster"'
      replace:
        path: "/root/.zshrc"
        regexp: '^ZSH_THEME="[^"]+"'
        replace: 'ZSH_THEME="agnoster"'
      become_user: "{{ my_zsh_user }}"

    - name: Change default shell to zsh for the user
      user:
        name: "{{ my_zsh_user }}"
        shell: /usr/bin/zsh
